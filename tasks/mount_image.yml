---

#default_raspbian="$IMG_DIR/raspbian.img"
#raspbian=${1:-$default_raspbian}

#image_sectors=$(fdisk -o start --units=sectors -l $raspbian)
#image_sizes=$(fdisk -o size --bytes -l $raspbian | tail -n 2)

#partitions=$(echo -e "$image_sectors" | tail -n 2)
#sector_size=$(echo -e "$image_sectors" | perl -lne 'print $1 if /Units.*= (.*) bytes/')

#boot_sector_offset=$(echo -e "$partitions" | sed '1q;d')
#os_sector_offset=$(echo -e "$partitions" | sed '2q;d')

#boot_byte_offset=$(($boot_sector_offset*$sector_size))
#os_byte_offset=$(($os_sector_offset*$sector_size))

#boot_sizelimit=$(echo -e "$image_sizes" | sed '1q;d' | xargs)
#os_sizelimit=$(echo -e "$image_sizes" | sed '2q;d' | xargs)


# ===========================================================
# do mounting
#
# mount -v -o offset=$boot_byte_offset,sizelimit=$boot_sizelimit -t auto $raspbian $PI_BOOT_MOUNT
# mount -v -o offset=$os_byte_offset,sizelimit=$os_sizelimit -t auto $raspbian $PI_OS_MOUNT


- block:

  
  # SMELL needs a "when does not exist clause"
  - name: create the mapper loop devices from the image file
    ansible.builtin.command: "/usr/sbin/kpartx -asv {{ pi_os_image }}"
    register: kpartx_results

     
  # FACT I know it exists!!! fix
  - set_fact:
      loop_mappers: "{{ kpartx_results.stdout | regex_findall('(?<=add map )\\w*') }}"
    when: kpartx_results.stdout is defined and kpartx_results.stdout | length > 0 




  # loop

  - name: interating over images
    debug:
      msg: "/dev/mapper/{{item}}"     
    loop: "{{  loop_mappers }}"
  



  - name: Create the mount directories if they does not exist
    vars:
      mnt_imgs: ['/tmp/pi_image/boot','/tmp/pi_image/rootfs']
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      mode: '0755'
    loop: "{{  mnt_imgs }}"

  - name: Mount partition
    vars:
      mnt_imgs: ['/tmp/pi_image/boot','/tmp/pi_image/rootfs']
    ansible.posix.mount:
      path: "{{ item.0 }}"
      src: "/dev/mapper/{{ item.1 }}"
      fstype: auto
      state: mounted
    # with_together:
    #   - mnt_imgs
    #   - loop_mappers 
    loop: "{{ mnt_imgs | zip(loop_mappers) | list }}"

  tags:
    - mount
    - all
 
